  Using basic (mostly Nathan-generated) vor_poles implementation:
    Perhaps we should use an out-of-the-box implementation curated by numpy or someone else

These are generated from this "plane()" function:

#=========================================================
def plane():
  plane=np.zeros((19,19,19)).astype('bool')
  for x in range(6,13):
    for y in range(6,13):
      for z in range(6,13):
        if x==y:
          plane[x,y,z]=True
  return plane
#=========================================================


>>> import numpy as np;norms=np.load("norms_plane.npy")
>>> norms
array([[ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 3.        , -6.5       , -4.        ],
       [-2.5       , -6.7       ,  0.5       ],
       [-3.5       , -7.1       ,  0.5       ],
       [-4.        , -7.4       ,  0.        ],
       [-6.98888889, -3.61111111, -0.5       ],
       [-6.36666667, -2.83333333, -0.5       ],
       [-4.        ,  3.        ,  6.5       ],
       [ 3.125     , -4.125     , -4.9       ],
       [-2.83333333,  3.83333333, -0.5       ],
       [ 3.5       , -2.5       , -0.5       ],
       [ 3.27777778, -2.27777778, -0.5       ],
       [-2.16666667,  3.16666667, -0.5       ],
       [-2.27777778,  3.27777778,  0.5       ],
       [-4.125     ,  3.125     ,  4.9       ],
       [ 3.25      , -4.25      , -3.7       ],
       [-3.38888889,  4.38888889, -0.5       ],
       [-3.05555556,  4.05555556, -0.5       ],
       [-2.83333333,  3.83333333, -0.5       ],
       [-2.72222222,  3.72222222, -0.5       ],
       [-2.83333333,  3.83333333,  0.5       ],
       [-4.21111111,  3.21111111,  3.7       ],
       [-4.32568807,  5.32568807,  0.14220183],
       [-4.16666667,  5.16666667, -0.5       ],
       [-3.83333333,  4.83333333, -0.5       ],
       [-3.61111111,  4.61111111, -0.5       ],
       [-3.5       ,  4.5       ,  0.5       ],
       [-3.61111111,  4.61111111,  0.5       ],
       [-3.95454545,  4.95454545,  1.04545455],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-5.26923077,  4.48901099,  0.26923077],
       [-5.16666667,  4.35714286, -0.5       ],
       [-4.83333333,  3.92857143, -0.5       ],
       [-4.61111111,  3.64285714, -0.5       ],
       [-4.5       ,  3.5       ,  0.5       ],
       [-4.61111111,  3.64285714,  0.5       ],
       [-4.93209877,  4.05555556,  0.94444444],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-4.04545455,  5.04545455, -1.95454545],
       [-4.35714286,  3.35714286, -0.5       ],
       [ 2.92857143, -3.92857143, -0.5       ],
       [-3.64285714,  2.64285714, -0.5       ],
       [-3.5       ,  2.5       , -0.5       ],
       [ 2.64285714, -3.64285714,  0.5       ],
       [-4.5       ,  3.5       ,  2.5       ],
       [-3.        ,  6.5       , -4.        ],
       [ 5.12857143,  4.07142857,  0.5       ],
       [ 5.23170732,  5.23170732,  0.40243902],
       [ 5.16666667,  5.16666667, -0.5       ],
       [ 4.83333333,  4.83333333, -0.5       ],
       [ 4.5       ,  4.7       , -0.5       ],
       [ 4.5       , -1.5       ,  4.5       ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]])






(Pdb) c
locs with dummies: 
[[ 1  1  1]
 [ 1  1 17]
 [ 1 10 10]
 [ 1 17  1]
 [ 1 17 17]
 [ 7 10 12]
 [10  1 10]
 [10  8 12]
 [10 10  1]
 [10 10 10]    #<--------   our king, index == 9
 [10 10 17]
 [10 12  8]
 [10 17 10]
 [12 10  8]
 [17  1  1]
 [17  1 17]
 [17 10 10]
 [17 17  1]
 [17 17 17]]
locs.shape: 
(19, 3)









locs with dummies: 
[[ 1  1  1]
 [ 1  1 17]
 [ 1 10 10]
 [ 1 17  1]
 [ 1 17 17]
 [ 4 10 15]
 [10  1 10]
 [10  5 15]
 [10 10  1]
 [10 10 10]    #<--------   our king, index == 9
 [10 10 17]
 [10 15  5]
 [10 17 10]
 [15 10  5]
 [17  1  1]
 [17  1 17]
 [17 10 10]
 [17 17  1]
 [17 17 17]]

real pt indices:  5, 7, 9, 11, 13, 15, 












=============================================================
=============================================================

  Some of the norms actually do look pretty similar to others; this is what we'd want b.c. this is generated from tests/test___norm_generation___in_mesh_py.py
  We definitely want to "fix" those zeros in the middle and understand the extra zero-rows we're seeing, though. ie:

    For calling norms(plane()), we should be seeing norms pointing in the (+0.7, -0.7, 0) or (-0.7, +0.7, 0) direction.  Instead we were getting this extreme bias towards high y values.



>>> import numpy as np
>>> plane_norms=np.load("norms_plane.npy")
>>> plane_norms
array([[ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-0.00212373,  0.97975698,  0.20017928],
       [-0.00241501,  0.97976492,  0.20013711],
       [-0.00257017,  0.97976912,  0.20011462],
       [-0.00290171,  0.97977802,  0.20006652],
       [ 0.12240951,  0.98667758,  0.10716003],
       [ 0.12198526,  0.98673247,  0.10713841],
       [-0.00226633,  0.97976088,  0.20015864],
       [-0.00212373,  0.97975698,  0.20017928],
       [-0.00241501,  0.97976492,  0.20013711],
       [-0.00257017,  0.97976912,  0.20011462],
       [-0.00290171,  0.97977802,  0.20006652],
       [-0.1336431 , -0.94002047,  0.31384876],
       [ 0.12178277,  0.9867586 ,  0.10712806],
       [-0.00257017,  0.97976912,  0.20011462],
       [-0.00273225,  0.97977348,  0.20009111],
       [-0.00273225,  0.97977348,  0.20009111],
       [-0.00290171,  0.97977802,  0.20006652],
       [-0.00345983,  0.97979277,  0.19998537],
       [-0.13361963, -0.94003401,  0.3138182 ],
       [-0.13510584, -0.93290612,  0.33381518],
       [-0.00387974,  0.97980369,  0.19992419],
       [-0.00366452,  0.97979811,  0.19995557],
       [-0.00345983,  0.97979277,  0.19998537],
       [-0.00366452,  0.97979811,  0.19995557],
       [-0.00610313,  0.97985879,  0.19959837],
       [-0.13352539, -0.94008748,  0.3136981 ],
       [-0.13806302, -0.93222079,  0.33451906],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-0.00771087,  0.97989582,  0.19936081],
       [-0.00926989,  0.97992946,  0.19912891],
       [-0.00926989,  0.97992946,  0.19912891],
       [-0.0112765 ,  0.97996948,  0.19882821],
       [-0.01630313,  0.98005345,  0.19806423],
       [-0.13321644, -0.9402542 ,  0.31332956],
       [-0.15472565, -0.92818304,  0.338432  ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-0.01395561,  0.98001714,  0.19842291],
       [-0.01630313,  0.98005345,  0.19806423],
       [-0.02593614,  0.98014896,  0.19655874],
       [-0.0518052 ,  0.97997433,  0.19226683],
       [-0.10900014,  0.97730073,  0.1816652 ],
       [-0.13084175, -0.9412846 ,  0.3112294 ],
       [-0.27250311, -0.89088277,  0.3634143 ],
       [-0.02593614,  0.98014896,  0.19655874],
       [-0.02902784,  0.98016127,  0.19606443],
       [-0.0518052 ,  0.97997433,  0.19226683],
       [-0.16526291,  0.97149313,  0.16996842],
       [ 0.01646811, -0.85521638,  0.5180094 ],
       [-0.51230657, -0.49439643,  0.70222087],
       [ 0.90248981, -0.38103254, -0.20081421],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]])






Here are the results (I think) after I threw in a proper ".T" to flip a matrix.  TODO:  Double check whether the transpose was properly applied to the matrix

(Pdb) hull.points
array([[10.83333333,  4.16666667,  6.5       ],
       [10.5       ,  4.5       ,  7.5       ],
       [ 9.5       ,  3.5       ,  6.5       ],
       [ 9.16666667,  3.83333333,  7.5       ],
       [ 4.16666667, 10.83333333,  6.5       ],
       [ 4.5       , 10.5       ,  7.5       ],
       [ 3.5       ,  9.5       ,  6.5       ],
       [ 3.83333333,  9.16666667,  7.5       ]])
(Pdb) final_covars[pt_idx]
array([[-0.16729157,  0.90191282,  0.36350404],
       [ 0.00431337,  0.02104862,  0.00609663],
       [ 0.6511736 , -0.43476604,  0.19781283]])
(Pdb) vals,vects = LA.eig(final_covars[pt_idx])
(Pdb) vals
array([-0.50242532,  0.53925768,  0.01473753])
(Pdb) vects
array([[ 0.73287868, -0.47180861, -0.48964629],
       [ 0.00188493, -0.01429883, -0.40914712],
       [-0.68035674, -0.88158504,  0.76996438]])

In our case, the max eig vect is [-0.47180861, -0.01429883, -0.88158504], which doesn't point how we'd expect it to.



=====================================================================================
=====================================================================================


Using the generating function "offslope_plane()", I got the following norms: 
#_______________________________________________________________________

def offslope_plane():
  ''' 
    for testing
    the "flat" plane (y-x=0 gave us weird results, and I suspect that's becuase of how the normals are calculated with linalg; (ie. the solver doesn't like zeros)) 
  '''
  plane=np.zeros((19,19,19)).astype('bool')
  slope=13.
  for x in range(6,13):
    for y in range(6,13):
      for z in range(6,13):
        if x==round(y-(z/slope)):
          plane[x,y,z]=True
  return plane
#_______________________________________________________________________

if __name__=='__main__':
  main(offslope_plane(), 'norms_plane_single.npy')

#_______________________________________________________________________


>>> import numpy as np;norms_plane=np.load("norms_plane_single.npy");norms_plane
array([[ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.0828993 , -0.89140581,  0.44555965],
       [-0.28676653, -0.41739041,  0.86229357],
       [ 0.        ,  0.        ,  0.        ],
       [-0.66227131,  0.44013924,  0.60636141],
       [ 0.37937303, -0.90525231,  0.1912965 ],
       [-0.70232783,  0.53202359,  0.4729551 ],
       [ 0.66658843, -0.7424083 ,  0.06700584],
       [-0.56515129,  0.82455973,  0.02655701],
       [ 0.        ,  0.        ,  0.        ],
       [-0.73180028,  0.68068883, -0.03363127],
       [-0.78385861,  0.49239785,  0.37829886],
       [ 0.73739285, -0.51395342, -0.43829632],
       [ 0.67996976, -0.73112344,  0.05567445],
       [ 0.64897475, -0.76068767,  0.01363969],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.58944172, -0.76620392,  0.25591017],
       [-0.59087069,  0.79832157, -0.11642375],
       [-0.60115891,  0.76576183, -0.22850993],
       [ 0.64368514, -0.76281577,  0.06149429],
       [ 0.5922466 , -0.80086685,  0.0886355 ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.68912355, -0.32743773, -0.64644665],
       [-0.60220349,  0.43141856,  0.6717358 ],
       [ 0.75652843, -0.62390089,  0.19599086],
       [-0.59203223,  0.75954274, -0.26943026],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-0.63903796,  0.37070985,  0.6739471 ],
       [-0.57254007,  0.26764256, -0.77496151],
       [ 0.20148269, -0.73852768,  0.64341402],
       [-0.34195664,  0.71517794, -0.60957868],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [-0.74211917,  0.64481815,  0.18294452],
       [-0.9626051 ,  0.16031356, -0.21838264],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.76608047, -0.61184431, -0.19689401],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]])


